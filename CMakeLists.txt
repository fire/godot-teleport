cmake_minimum_required(VERSION 3.8)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
if(NOT DEFINED TELEPORT_SOLUTION_NAME OR "${TELEPORT_SOLUTION_NAME}" MATCHES "")
	if(TELEPORT_BUILD_DOCS)
		project(Teleport_Docs)
	elseif(TELEPORT_UNITY)
		project(Teleport_Server_Unity)
	else()
		if(TELEPORT_SERVER)
			project(Teleport_Server)
		else()
			project(Teleport_Client)
		endif()
	endif()
else()
	project("${TELEPORT_SOLUTION_NAME}")
endif()
set(PLATFORM_USE_FMT ON)
set(TELEPORT_SOLUTION_NAME "" CACHE STRING "")
option(TELEPORT_SERVER_SUPPORT_WEBRTC "Should the server support WebRTC connections from browsers?" OFF)
set(TELEPORT_LIBWEBRTC_BUILD_DIR "" CACHE PATH "WebRTC Build path")
set(REMOTEPLAY_PLATFORM_DIR "${CMAKE_SOURCE_DIR}/firstparty/Platform" )
set(SIMUL_PLATFORM_FOLDER_PREFIX "Platform" )
set(SIMUL_PLATFORM_DIR ${REMOTEPLAY_PLATFORM_DIR})
set(PLATFORM_IMGUI ON)
option(TELEPORT_UNITY "Build for Unity?" ${REMOTEPLAY_UNITY})
option(TELEPORT_BUILD_DOCS "Build documentation?" OFF)
option(TELEPORT_INTERNAL_CHECKS "Internal checks for development?" OFF)
if(TELEPORT_UNITY)
	set(TELEPORT_SERVER ON CACHE BOOL "")
else()
	option(TELEPORT_SERVER "Build for server? If true, client will not be built." ${REMOTEPLAY_SERVER})
endif()
if(TELEPORT_SERVER AND (NOT TELEPORT_BUILD_DOCS))
	set(TELEPORT_CLIENT OFF)
else()
	set(TELEPORT_CLIENT ON)
	option(TELEPORT_CLIENT_USE_D3D12 "Use D3D12?" OFF)
	if( ${TELEPORT_CLIENT_USE_D3D12})
		set(TELEPORT_CLIENT_USE_D3D11 OFF)
	else()
		set(TELEPORT_CLIENT_USE_D3D11 ON)
	endif()
	option(TELEPORT_CLIENT_USE_PLATFORM_VIDEO_DECODER "Use Platform video decoder? Currently requires TELEPORT_CLIENT_USE_D3D12" OFF)

	if(${TELEPORT_CLIENT_USE_PLATFORM_VIDEO_DECODER})
		if(NOT ${TELEPORT_CLIENT_USE_D3D12})
			message("Warning: Setting TELEPORT_CLIENT_USE_D3D12 true because TELEPORT_CLIENT_USE_PLATFORM_VIDEO_DECODER is true.")
			set(TELEPORT_CLIENT_USE_D3D12 ON)
		endif()
	endif()
endif()

if(TELEPORT_UNITY)
	set(REMOTEPLAY_UNITY_PLUGINS_DIR "${CMAKE_BINARY_DIR}/../Assets/Teleport/Plugins/x86_64" CACHE PATH "")
	set(REMOTEPLAY_UNITY_PROJECT_DIR "${CMAKE_BINARY_DIR}/.." CACHE PATH "")
	set(REMOTEPLAY_UNITY_EDITOR_DIR "C:/Program Files/Unity/Editor" CACHE PATH "")
	set(REMOTEPLAY_UNITY_EDITOR_EXE "Unity.exe" CACHE STRING "")
	find_program(REMOTEPLAY_UNITY_EDITOR_EXE Unity.exe PATHS ${REMOTEPLAY_UNITY_EDITOR_DIR})
endif()
set (CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "")

#Override srt encryption to be off.
set(ENABLE_ENCRYPTION OFF CACHE BOOL "Enable encryption in SRT")

#Hide Basis Universal STATIC option, and set to opposite of USE_DYNAMIC_RUNTIME.
if(LIBAV_USE_DYNAMIC_RUNTIME)
	set(STATIC OFF CACHE INTERNAL "Static linking for Basis Universal" FORCE)
else()
	set(STATIC ON CACHE INTERNAL "Static linking for Basis Universal" FORCE)
endif()

set(CMAKE_CXX_STANDARD 17 )
set(CMAKE_CXX_STANDARD_REQUIRED ON )
set(CMAKE_CXX_EXTENSIONS ON )
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF")
SET(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /DEBUG")

set(CONFIG_NAME $<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>)
#message(STATUS "CONFIG_NAME ${CONFIG_NAME}")

#defaults for srt:
set(PTHREAD_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/thirdparty/srt/submodules/pthread-win32)
#set(PTHREAD_LIBRARY ${CMAKE_SOURCE_DIR}/thirdparty/srt/submodules/pthread-win32/bin/x64_MSVC2015.Release/pthread_lib.lib)
set(PTHREAD_LIBRARY ${CMAKE_SOURCE_DIR}/thirdparty/srt/submodules/pthread-win32/windows/VS2019/bin/Release-Unicode-64bit-x64/pthread_static_lib.lib)
option(ENABLE_APPS "" OFF)
option(ENABLE_SHARED "" OFF) 
option(ENABLE_STATIC "" ON)

#openssl

set(SSL_EAY_DEBUG ${CMAKE_SOURCE_DIR}/thirdparty/openssl/libssl_MT.lib)
set(SSL_EAY_RELEASE ${CMAKE_SOURCE_DIR}/thirdparty/openssl/libssl_MT.lib)

set(OPENSSL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/thirdparty/openssl/include)

if(TELEPORT_UNITY)
	#set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	#set( EXECUTABLE_OUTPUT_PATH ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	#set( LIBRARY_OUTPUT_PATH ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	#set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	#set( CMAKE_PDB_OUTPUT_DIRECTORY ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
endif()
#defaults for basisu
if(TELEPORT_SERVER)
	option(STATIC "" OFF)
	set(CMAKE_CXX_FLAGS_RELEASE "/Od /Ob0 /Zi /DNDEBUG /DNOMINMAX /MT")
	set(CMAKE_CXX_FLAGS_DEBUG "/Zi /Ob0 /Od /RTC1 /DNOMINMAX /MDd")
else()
	option(STATIC "" ON)
	set(CMAKE_CXX_FLAGS_RELEASE "/MT /Od /Ob0 /Zi /DNDEBUG /DNOMINMAX")
	set(CMAKE_CXX_FLAGS_DEBUG "/MTd /Zi /Ob0 /Od /RTC1 /DNOMINMAX")
		#someday we will add /fsanitize=address - when MS have fixed all the address bugs in their core libs.)
endif()

option(BUILD_AS_LIBRARY "" ON) 

function(set_target_runtime targname rt)
	# Default to statically-linked runtime.
	if("${rt}" STREQUAL "")
		set(rt "static")
	endif()
	#message(STATUS "rt ${rt}")
	if(${rt} STREQUAL "static")
		SET_TARGET_PROPERTIES(${targname} PROPERTIES COMPILE_OPTIONS "/MT$<$<CONFIG:Debug>:d>")
	else()	
		SET_TARGET_PROPERTIES(${targname} PROPERTIES COMPILE_OPTIONS "/MD$<$<CONFIG:Debug>:d>")
	endif()
endfunction()

function(SetTeleportDefaults targname)
	set_target_properties( ${targname} PROPERTIES PREFIX "" )
	add_definitions(-DUNICODE -D_UNICODE)
	if(MSVC)
		target_compile_options(${targname} PRIVATE /W3 /wd4011 /wd4514 /JMC)
	else()
		target_compile_options(${targname} PRIVATE -Wall -Wextra -pedantic -Werror )
	endif()
	target_compile_definitions(${targname} PRIVATE CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR} REMOTEPLAY_SUPPORT_AUDIO=$<BOOL:${TELEPORT_SUPPORT_AUDIO}> CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR} TELEPORT_INTERNAL_CHECKS=$<BOOL:${TELEPORT_INTERNAL_CHECKS}>)
	message("target_compile_definitions(${targname} PRIVATE CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR} REMOTEPLAY_SUPPORT_AUDIO=$<BOOL:${TELEPORT_SUPPORT_AUDIO}> CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR} TELEPORT_INTERNAL_CHECKS=$<BOOL:${TELEPORT_INTERNAL_CHECKS}>)")
endfunction()

function(add_teleport_static_library targname)
  add_library(${ARGV})
  set_target_runtime(${targname} static)
  SetTeleportDefaults( ${targname} )
endfunction()

function(add_teleport_static_executable targname)
	add_executable(${ARGV})
	#message( STATUS set_target_runtime ${targname})
	set_target_runtime(${targname} static)
	SetTeleportDefaults( ${targname} )
endfunction()

add_subdirectory(firstparty/Platform/External/fmt)
#set_target_properties(zlib PROPERTIES FOLDER thirdparty/zlib)

add_subdirectory(TeleportCore)

if(TELEPORT_SERVER OR TELEPORT_BUILD_DOCS)
	add_subdirectory(TeleportServer)
	set(LIBAV_USE_DYNAMIC_RUNTIME ON CACHE BOOL "")
	set(LIBAV_BUILD_SHARED_LIBS ON CACHE BOOL "")
	set(SA_BUILD_SHARED_LIB ON CACHE BOOL "")
	add_subdirectory(thirdparty/cpp-httplib)
endif()
 
if(TELEPORT_CLIENT)
	set(OPENSSL_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/openssl)
	set(OPENSSL_USE_STATIC_LIBS TRUE)
	set(OPENSSL_MSVC_STATIC_RT TRUE)
	add_subdirectory(firstparty/Platform)
	add_subdirectory(pc_client)
	add_subdirectory(ClientRender)
	add_subdirectory(TeleportClient)
	add_subdirectory(client/Shaders/DirectX11)
	add_subdirectory(client/Shaders/DirectX12)
	add_subdirectory(client/Shaders/Vulkan)
	set(LIBAV_USE_DYNAMIC_RUNTIME OFF CACHE BOOL "")
	set(LIBAV_BUILD_SHARED_LIBS OFF CACHE BOOL "")
	set(SA_BUILD_SHARED_LIB OFF CACHE BOOL "")
endif()

set(SA_BUILD_SHARED_LIB ${TELEPORT_SERVER})

add_subdirectory(TeleportAudio)
add_subdirectory(libavstream)

if(TELEPORT_CLIENT_USE_D3D12)
	target_compile_definitions(libavstream PRIVATE LIBAV_USE_D3D12=1)
else()
	target_compile_definitions(libavstream PRIVATE LIBAV_USE_D3D12=0)
endif()

add_subdirectory(thirdparty/enet)
set_target_properties( enet PROPERTIES FOLDER thirdparty/enet)

add_subdirectory(thirdparty/basis_universal)
set_target_properties( basisu PROPERTIES FOLDER thirdparty/basis_universal)

add_subdirectory(thirdparty/draco)
# Here we will put all the draco targets into the thirdparty/draco solution folder:
macro(get_all_targets_recursive targets dir)
    get_property(subdirectories DIRECTORY ${dir} PROPERTY SUBDIRECTORIES)
    foreach(subdir ${subdirectories})
        get_all_targets_recursive(${targets} ${subdir})
    endforeach()

    get_property(current_targets DIRECTORY ${dir} PROPERTY BUILDSYSTEM_TARGETS)
    list(APPEND ${targets} ${current_targets})
endmacro()
set(targets)
get_all_targets_recursive(targets ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/draco)
foreach(targ ${targets})
	set_target_properties( ${targ} PROPERTIES FOLDER thirdparty/draco)
	#message(${targ})
endforeach()

add_subdirectory(thirdparty/srt)
if(TELEPORT_CLIENT)
	set_target_properties( srt_static PROPERTIES FOLDER thirdparty/srt)
endif()
set_target_properties( srt_virtual PROPERTIES FOLDER thirdparty/srt)


if(TELEPORT_BUILD_DOCS)
	add_subdirectory ("docs")
endif()

# Create an installer for the client:
#set(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP TRUE)
#include(InstallRequiredSystemLibraries)
#install(PROGRAMS ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS}
#        DESTINATION programs
#        COMPONENT applications)
set(CPACK_PACKAGE_NAME "TeleportClientInstaller")
set(CPACK_PACKAGE_VENDOR "Simul")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Installer for the TeleportVR PC CLient")

# get commit id from a file:
file(TOUCH "teleport_commit.properties")
file(READ "teleport_commit.properties" ver)
if(NOT( "${ver}" STREQUAL ""))
	message(${ver})
	string(REGEX MATCH "TELEPORT_COMMIT= ([a-zA-Z0-9]+)" _ ${ver})
endif()
set(TELEPORT_COMMIT ${CMAKE_MATCH_1})
set(CPACK_PACKAGE_VERSION_MAJOR "${TELEPORT_COMMIT}")
set(CPACK_PACKAGE_VERSION_MINOR "0")
set(CPACK_PACKAGE_VERSION_PATCH "0")
set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "TeleportVR")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${TELEPORT_COMMIT}-x64")
message("CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_FILE_NAME}")
file(WRITE "build_client/installer_filename.properties" "TELEPORT_CLIENT_INSTALLER_FILENAME=${CPACK_PACKAGE_FILE_NAME}.exe")
#
set(CPACK_GENERATOR "NSIS")
set(CPACK_COMPONENTS_ALL client )

#set(CPACK_COMPONENT_CTDATA_GROUP "data")
#set(CPACK_COMPONENT_INSTRUCTIONDATA_GROUP "data")
#
#set(CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME "applications (hello & world)")
#set(CPACK_COMPONENT_GROUP_DATA_DESCRIPTION "data (CT and instructions)")
#
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}\\\\Installers\\\\TeleportClientLicence.md")
##Create an icon which will be displayed inside the installation wizard, and an icon for the installer and uninstaller. Tell CPack about these icons.
set(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}\\\\Installers\\\\TeleportIcon.ico")
set(CPACK_NSIS_MUI_ICON "${CMAKE_SOURCE_DIR}\\\\Installers\\\\TeleportIcon.ico")
set(CPACK_NSIS_MUI_UNIICON "${CMAKE_SOURCE_DIR}\\\\Installers\\\\TeleportIcon.ico")
##Set the programs, directories and files, displayed under the Start menu shortcut.
set(CPACK_NSIS_MENU_LINKS "build_client\\\\bin\\\\Release\\\\pc_client" "Teleport VR Client")

include(CPack)