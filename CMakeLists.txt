cmake_minimum_required(VERSION 3.8)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(REMOTEPLAY_UNITY)
	project(RemotePlay_Unity)
else()
	if(REMOTEPLAY_SERVER)
		project(RemotePlay_Server)
	else()
		project(RemotePlay_Client)
	endif()
endif()

set(REMOTEPLAY_PLATFORM_DIR "${CMAKE_SOURCE_DIR}/firstparty/Platform" )
set(SIMUL_PLATFORM_FOLDER_PREFIX "Platform" )
set(SIMUL_PLATFORM_DIR ${REMOTEPLAY_PLATFORM_DIR})
option(REMOTEPLAY_UNITY "Build for Unity?" OFF)
if(REMOTEPLAY_UNITY)
	set(REMOTEPLAY_SERVER ON CACHE BOOL "")
else()
	option(REMOTEPLAY_SERVER "Build for server? If true, client will not be built." OFF)
endif()

if(REMOTEPLAY_UNITY)
	set(REMOTEPLAY_UNITY_PLUGINS_DIR "${CMAKE_BINARY_DIR}/../Assets/external-sdk/Teleport/Plugins/x86_64" CACHE PATH "")
	set(REMOTEPLAY_UNITY_PROJECT_DIR "${CMAKE_BINARY_DIR}/.." CACHE PATH "")
	set(REMOTEPLAY_UNITY_EDITOR_DIR "C:/Program Files/Unity/Editor" CACHE PATH "")
	set(REMOTEPLAY_UNITY_EDITOR_EXE "Unity.exe" CACHE STRING "")
	find_program(REMOTEPLAY_UNITY_EDITOR_EXE Unity.exe PATHS ${REMOTEPLAY_UNITY_EDITOR_DIR})
endif()
set (CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "")

#Override srt encryption to be off.
set(ENABLE_ENCRYPTION OFF CACHE BOOL "Enable encryption in SRT")

#Hide Basis Universal STATIC option, and set to opposite of USE_DYNAMIC_RUNTIME.
if(LIBAV_USE_DYNAMIC_RUNTIME)
	set(STATIC OFF CACHE INTERNAL "Static linking for Basis Universal" FORCE)
else()
	set(STATIC ON CACHE INTERNAL "Static linking for Basis Universal" FORCE)
endif()

set(CMAKE_CXX_STANDARD 17 )
set(CMAKE_CXX_STANDARD_REQUIRED ON )
set(CMAKE_CXX_EXTENSIONS ON )
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF")
SET(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /DEBUG")

set(CONFIG_NAME $<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>)
#message(STATUS "CONFIG_NAME ${CONFIG_NAME}")

#defaults for srt:
set(PTHREAD_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/thirdparty/srt/submodules/pthread-win32)
set(PTHREAD_LIBRARY ${CMAKE_SOURCE_DIR}/thirdparty/srt/submodules/pthread-win32/bin/x64_MSVC2015.Release/pthread_lib.lib)
option(ENABLE_APPS "" OFF)
option(ENABLE_SHARED "" OFF) 
option(ENABLE_STATIC "" ON)

#openssl

#set(LIB_EAY_DEBUG ${CMAKE_SOURCE_DIR}/thirdparty/openssl/lib/VC/libcrypto64MTd.lib)
#set(LIB_EAY_RELEASE ${CMAKE_SOURCE_DIR}/thirdparty/openssl/lib/VC/libcrypto64MT.lib)
set(SSL_EAY_DEBUG ${CMAKE_SOURCE_DIR}/thirdparty/openssl/lib/VC/libssl64MTd.lib)
set(SSL_EAY_RELEASE ${CMAKE_SOURCE_DIR}/thirdparty/openssl/lib/VC/libssl64MT.lib )

set(OPENSSL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/thirdparty/openssl/include)

if(REMOTEPLAY_UNITY)
	#set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	#set( EXECUTABLE_OUTPUT_PATH ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	#set( LIBRARY_OUTPUT_PATH ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	#set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
	#set( CMAKE_PDB_OUTPUT_DIRECTORY ${REMOTEPLAY_UNITY_PLUGINS_DIR} )
endif()
#defaults for basisu
if(REMOTEPLAY_SERVER)
	option(STATIC "" OFF)
	set(CMAKE_CXX_FLAGS_RELEASE "/Od /Ob0 /Zi /DNDEBUG")
	set(CMAKE_CXX_FLAGS_DEBUG "/Zi /Ob0 /Od /RTC1")
else()
	option(STATIC "" ON)
	set(CMAKE_CXX_FLAGS_RELEASE "/MT /Od /Ob0 /Zi /DNDEBUG")
	set(CMAKE_CXX_FLAGS_DEBUG "/MTd /Zi /Ob0 /Od /RTC1")
endif()
option(BUILD_AS_LIBRARY "" ON) 

function(set_target_runtime targname rt)
	# Default to statically-linked runtime.
	if("${rt}" STREQUAL "")
		set(rt "static")
	endif()
	#message(STATUS "rt ${rt}")
	if(${rt} STREQUAL "static")
		SET_TARGET_PROPERTIES(${targname} PROPERTIES COMPILE_OPTIONS "/MT$<$<CONFIG:Debug>:d>")
	else()	
		SET_TARGET_PROPERTIES(${targname} PROPERTIES COMPILE_OPTIONS "/MD$<$<CONFIG:Debug>:d>")
	endif()
endfunction()

function(SetDefaults targname)
	set_target_properties( ${targname} PROPERTIES PREFIX "" )
	add_definitions(-DUNICODE -D_UNICODE)
	if(MSVC)
		target_compile_options(${targname} PRIVATE /W3 /wd4011 /wd4514 )
	else()
		target_compile_options(${targname} PRIVATE -Wall -Wextra -pedantic -Werror )
	endif()
	target_compile_definitions(${targname} PRIVATE CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR} REMOTEPLAY_SUPPORT_AUDIO=$<BOOL:${REMOTEPLAY_SUPPORT_AUDIO}> )
	target_compile_definitions(${targname} PRIVATE CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR} REMOTEPLAY_SUPPORT_AUDIO=$<BOOL:${REMOTEPLAY_SUPPORT_AUDIO}> )
endfunction()

function(add_static_library targname)
  add_library(${ARGV})
  set_target_runtime(${targname} static)
  SetDefaults( ${targname} )
endfunction()

function(add_static_executable targname)
	add_executable(${ARGV})
	#message( STATUS set_target_runtime ${targname})
	set_target_runtime(${targname} static)
	SetDefaults( ${targname} )
endfunction()

if(REMOTEPLAY_SERVER)
	add_subdirectory(SimulCasterServer)
	set(LIBAV_USE_DYNAMIC_RUNTIME ON CACHE BOOL "")
	set(LIBAV_BUILD_SHARED_LIBS ON CACHE BOOL "")
else()
	add_subdirectory(firstparty/Platform)
	add_subdirectory(pc_client)
	add_subdirectory(SimulCasterAudio)
	add_subdirectory(SimulCasterRenderer)
	set(LIBAV_USE_DYNAMIC_RUNTIME OFF CACHE BOOL "")
	set(LIBAV_BUILD_SHARED_LIBS OFF CACHE BOOL "")
endif()

add_subdirectory(libavstream)
add_subdirectory(thirdparty/enet)
set_target_properties( enet PROPERTIES FOLDER thirdparty/enet)
add_subdirectory(thirdparty/basis_universal)
set_target_properties( basisu PROPERTIES FOLDER thirdparty/basis_universal)
add_subdirectory(thirdparty/srt)
set_target_properties( srt_static PROPERTIES FOLDER thirdparty/srt)
set_target_properties( srt_virtual PROPERTIES FOLDER thirdparty/srt)
set_target_properties( haicrypt_virtual PROPERTIES FOLDER thirdparty/srt)