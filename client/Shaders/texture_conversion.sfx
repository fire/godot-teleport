//  Copyright (c) 2015-2017 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "common.sl"

uniform Texture2D<uint> yTexture;
uniform Texture2D<uint2> uvTexture;
uniform Texture2D<float4> ycbcrTexture;
uniform RWTexture2D<float4> rgbTexture; 

float4 Yuv420ToRgbForPixel(uint y, uint u, uint v) 
{
	float fy = float(int(y) - 16);
	float fu = float(int(u) - 128);
	float fv = float(int(v) - 128);

	float maxf = 255.0f;

	float4 rgb;
	rgb.x = clamp((1.16438f * fy) +  (0.0f * fu) + (1.83367f  * fv), 0.0f, maxf);
	rgb.y = clamp((1.16438f * fy) + (-0.218117f * fu) + (-0.545076f * fv), 0.0f, maxf);
	rgb.z = clamp((1.16438f * fy) + (2.16063f  * fu)  +  (0.0f * fv), 0.0f, maxf);
	rgb.w = 1.0f;

	// Convert to unit scale float4needed f or the rgbTexture.
	float toUnitScale = 1.0f / 255.0f;
	rgb.xyz *= toUnitScale;

	return rgb;
}

[numthreads(16, 16, 1)]
shader void CS_NV12ToRGBA(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)
{
	uint2 threadID = uint2(g.xy * 16 + t.xy);
	uint W, H;
	rgbTexture.GetDimensions(W, H);

	int2 pos = int2(threadID) * 2;

	if (pos.x >= W || pos.y >= H)
	{
		return;
	}

	int2 uvPos = int2(threadID);

	uint l0 = yTexture.Load(int3(pos, 0)).x;
	uint l1 = yTexture.Load(int3(pos.x + 1, pos.y, 0)).x;
	uint l2 = yTexture.Load(int3(pos.x, pos.y + 1, 0)).x;
	uint l3 = yTexture.Load(int3(pos.x + 1, pos.y + 1, 0)).x;
	uint2 ch = uvTexture.Load(int3(uvPos, 0)).xy;

	// All four pixels have their own Y but share the U and V.
	float4 p0, p1, p2, p3;
	p0 = Yuv420ToRgbForPixel(l0, ch.x, ch.y);
	p1 = Yuv420ToRgbForPixel(l1, ch.x, ch.y);
	p2 = Yuv420ToRgbForPixel(l2, ch.x, ch.y);
	p3 = Yuv420ToRgbForPixel(l3, ch.x, ch.y);

	rgbTexture[pos] = p0;
	rgbTexture[int2(pos.x + 1, pos.y)] = p1;
	rgbTexture[int2(pos.x, pos.y + 1)] = p2;
	rgbTexture[int2(pos.x + 1, pos.y + 1)] = p3;
}

static float3 Colour_BT601_PrimaryR = float3(0.6400f, 0.3300f, 0.2126f);
static float3 Colour_BT601_PrimaryG = float3(0.2900f, 0.6000f, 0.7152f);
static float3 Colour_BT601_PrimaryB = float3(0.1500f, 0.0600f, 0.0722f);

static float3 Colour_BT709_PrimaryR = float3(0.6400f, 0.3300f, 0.2126f);
static float3 Colour_BT709_PrimaryG = float3(0.3000f, 0.6000f, 0.7152f);
static float3 Colour_BT709_PrimaryB = float3(0.1500f, 0.0600f, 0.0722f);

static float3 Colour_BT2020_PrimaryR = float3(0.7080f, 0.2920f, 0.2627f);
static float3 Colour_BT2020_PrimaryG = float3(0.1700f, 0.7970f, 0.6780f);
static float3 Colour_BT2020_PrimaryB = float3(0.1310f, 0.0460f, 0.0593f);

//https://en.wikipedia.org/wiki/YCbCr
//https://gist.github.com/yohhoy/dafa5a47dade85d8b40625261af3776a
mat3 YCbCrToRGB_ConversionMatrix(uint type)
{
	float a, b, c, d, e;
	switch (type)
	{
		case 0:
		{
			a = Colour_BT601_PrimaryR.z;
			b = Colour_BT601_PrimaryG.z;
			c = Colour_BT601_PrimaryB.z;
			break;
		}
		default:
		case 1:
		{
			a = Colour_BT709_PrimaryR.z;
			b = Colour_BT709_PrimaryG.z;
			c = Colour_BT709_PrimaryB.z;
			break;
		}
		case 2:
		{
			a = Colour_BT2020_PrimaryR.z;
			b = Colour_BT2020_PrimaryG.z;
			c = Colour_BT2020_PrimaryB.z;
			break;
		}
	}
	d = 2 * (a + b);
	e = 2 * (1 - a);
	
	return mat3(
		float3(1.0,                0.0,                  e),
		float3(1.0, (-1.0 * c * d / b), (-1.0 * a * e / b)),
		float3(1.0,                  d,                0.0)
	);
}

mat3 YCbCrToRGB_ConversionMatrix_Fast(uint type)
{
	mat3 result;
	switch (type)
	{

		case 0:
		{
			result = mat3(
				float3(+1.000, +0.000, +1.402),
				float3(+1.000, -0.344, -0.714),
				float3(+1.000, +1.772, +0.000));
			break;
		}
		default:
		case 1:
		{
			result = mat3(
				float3(+1.0000, +0.0000, +1.5748),
				float3(+1.0000, -0.1873, -0.4681),
				float3(+1.0000, +1.8556, +0.0000));
			break;
		}
		case 2:
		{
			result = mat3(
				float3(+1.0000, +0.0000, +1.4746),
				float3(+1.0000, -0.1646, -0.5714),
				float3(+1.0000, +1.8814, +0.0000));
			break;
		}
	}
	return result;
}

void CS_ConvertYCbCrToRGB(uint3 position, uint type)
{
	float3 value = ycbcrTexture.Load(int3(position.x, position.y, 0)).rgb;
	float Cr = value.r - 0.5;
	float Cb = value.b - 0.5;
	float Y1 = value.g;
	
	vec4 clr;
	clr.rgb = mul(float3(Y1, Cb, Cr), YCbCrToRGB_ConversionMatrix_Fast(type));
	clr.a = 1.0;
	rgbTexture[position.xy] = clr;
}

[numthreads(8, 8, 1)]
shader void CS_ConvertYCbCrToRGB_BT601(uint3 position : SV_DispatchThreadID)
{
	CS_ConvertYCbCrToRGB(position, 0);
}

[numthreads(8, 8, 1)]
shader void CS_ConvertYCbCrToRGB_BT709(uint3 position : SV_DispatchThreadID)
{
	CS_ConvertYCbCrToRGB(position, 1);
}

[numthreads(8, 8, 1)]
shader void CS_ConvertYCbCrToRGB_BT2020(uint3 position : SV_DispatchThreadID) 
{ 
	CS_ConvertYCbCrToRGB(position, 2);
}

technique nv12_to_rgba
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0, CS_NV12ToRGBA()));
	}
}

technique ycbcr_to_rgb
{
	pass bt601
	{
		SetComputeShader(CompileShader(cs_5_0, CS_ConvertYCbCrToRGB_BT601()));
	}
	pass bt709
	{
		SetComputeShader(CompileShader(cs_5_0, CS_ConvertYCbCrToRGB_BT709()));
	}
	pass bt2020
	{
		SetComputeShader(CompileShader(cs_5_0, CS_ConvertYCbCrToRGB_BT2020()));
	}
}
