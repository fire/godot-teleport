#extension GL_OES_EGL_image_external_essl3 : require
precision lowp float;

layout(rgba8, binding = 0) uniform writeonly lowp image2D destTex;
layout(binding = 1) uniform highp samplerExternalOES videoFrameTexture;
layout(std140, binding = 2) uniform cubemapUB
{
    uvec2 dimensions;
    ivec2 sourceOffset;
    uint faceSize;
    uint mip;
    uint face;
} cub;

layout (local_size_x = 4, local_size_y = 4, local_size_z = 1) in;
void colour_only()
{
    uvec3 invocationId=gl_GlobalInvocationID;
    ivec2 pos = ivec2(invocationId.xy);
    vec4 lookup = texelFetch(videoFrameTexture, pos, 0);
    // RGB values must be squared here because the server used their square root to improve colour quantization in the video encoder.
    lookup.r *= lookup.r;
    lookup.g *= lookup.g;
    lookup.b *= lookup.b;
    imageStore(destTex, pos, lookup);
}

layout (local_size_x = 4, local_size_y = 4, local_size_z = 1) in;
void colour_and_depth()
{
    vec4 DepthMask[4];
    DepthMask[0] = vec4(1.0,0.0,0.0,0.0); //0,0);
    DepthMask[1] = vec4(0.0,1.0,0.0,0.0); //1,0);
    DepthMask[2] = vec4(0.0,0.0,1.0,0.0); //0,1);
    DepthMask[3] = vec4(0.0,0.5,0.5,0.0); //1,1);

    uvec3 invocationId = gl_GlobalInvocationID;
    ivec2 pos = ivec2(invocationId.xy);
    ivec2 depthPos = pos / 2;
    ivec2 offsetToPos = pos * 2 - depthPos;
    depthPos += ivec2(0, cub.dimensions.y);
    vec4 lookup = texelFetch(videoFrameTexture, pos, 0);
    vec4 lookupDepth = texelFetch(videoFrameTexture, depthPos, 0);
    vec4 dMask = DepthMask[offsetToPos.x + 2 * offsetToPos.y];
    float d = dot(lookupDepth, dMask);
    // RGB values must be squared here because the server used their square root to improve colour quantization in the video encoder.
    lookup.r *= lookup.r;
    lookup.g *= lookup.g;
    lookup.b *= lookup.b;
    imageStore(destTex, pos, vec4(lookup.rgb, lookupDepth.r));
}
