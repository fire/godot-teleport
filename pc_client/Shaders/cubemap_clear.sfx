//  Copyright (c) 2015-2017 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "common.sl"
#include "render_states.sl"
#include "states.sl"
#include "camera_constants.sl"

uniform TextureCube cubemapTexture;
uniform Texture2D plainTexture;

shader vec4 PS_NormalView(posTexVertexOutput IN) : SV_TARGET
{
	const float PI = 3.1415926536;
	const float TwoPI = 2.0 * PI;
	vec3 view	= TexCoordsToView(IN.texCoords);
	float phi	= atan2(view.y, -view.x) / TwoPI;
	float theta	= acos(-view.z) / PI;
	vec2  uv	= fract(vec2(phi, theta));
	uv.y *= 0.5;
	vec4 lookup = 1.0*plainTexture.SampleLevel(wrapSamplerState, uv, 0).rgba;
	vec4 depth_lookup = 1.0*plainTexture.SampleLevel(wrapSamplerState, vec2(uv.x,uv.y+0.5), 0).rgba;
	// cubemapTexture.SampleLevel(cubeSamplerState, -view, 0);
    return lookup*depth_lookup;
}

shader vec4 PS_ShowTexture(posTexVertexOutput IN) : SV_TARGET
{
	vec4 lookup = plainTexture.SampleLevel(wrapSamplerState, IN.texCoords, 0);
	return lookup;
}

VertexShader vs = CompileShader(vs_4_0, VS_SimpleFullscreen());

technique normal_view
{
	pass p0
	{
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(DontBlend,vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetGeometryShader(NULL);
		SetVertexShader(vs);
		SetPixelShader(CompileShader(ps_4_0, PS_NormalView()));
	}
}
technique show_texture
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4( 0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(vs);
		SetPixelShader(CompileShader(ps_4_0, PS_ShowTexture()));
    }
}