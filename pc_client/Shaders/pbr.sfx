// Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/solid_constants.sl"
#include "../SL/camera_constants.sl"
#include "../SL/depth.sl"

uniform Texture2D diffuseTexture;
uniform TextureCube diffuseCubemap;
uniform TextureCube specularCubemap;

//////////////////////////
uniform TextureCube nearFarTextureCube;
uniform Texture2D loss2dTexture;
uniform Texture2D shadowTexture;
uniform Texture3D inscatterVolumeTexture;
//////////////////////////

struct vertexInput
{
    vec3 position		: POSITION;
    vec2 texCoords		: TEXCOORD0;
    vec3 normal			: TEXCOORD1;
};

struct vertexInputP
{
    vec3 position		: POSITION;
};
struct vertexOutput
{
    vec4 hPosition		: SV_POSITION;
    vec2 texCoords		: TEXCOORD0;
    vec3 normal			: TEXCOORD1;
    vec3 wpos			: TEXCOORD2;
    vec3 view			: TEXCOORD3;
    vec4 clip_pos		: TEXCOORD4;
};

shader vertexOutput VS_Solid_PosOnly(vertexInputP IN)
{
    vertexOutput OUT;
	vec4 opos		=vec4(IN.position.xyz,1.0);
    OUT.wpos		=mul(world, opos).xyz;
	OUT.view		=normalize(OUT.wpos.xyz- viewPosition);
    OUT.clip_pos	=mul(opos,worldViewProj);
	OUT.texCoords	=vec2(0,0);
#ifdef SFX_OPENGL
    OUT.normal.xyz	=mul(mat3(world),vec3(0,0,1.0));
#else
    OUT.normal.xyz	=mul(world,vec4(vec3(0,0,1.0),0.0)).xyz;
#endif
	OUT.hPosition	=OUT.clip_pos;
    return OUT;
}

shader vertexOutput VS_Solid(vertexInput IN)
{
    vertexOutput OUT;
	vec4 opos		=vec4(IN.position.xyz,1.0);
    OUT.wpos		=mul(world, opos).xyz;
	OUT.view		=normalize(OUT.wpos.xyz- viewPosition);
    OUT.clip_pos	=mul( opos,worldViewProj);
	OUT.texCoords	=IN.texCoords;
#ifdef SFX_OPENGL
    OUT.normal.xyz	=mul(mat3(world),IN.normal);
#else
    OUT.normal.xyz	=mul(world,vec4(IN.normal,0.0)).xyz;
#endif
	OUT.hPosition	=OUT.clip_pos;
    return OUT;
}

vec3 EnvBRDFApprox(vec3 specularColour, float roughness, float n_v)
{
	const vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);
	const vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);
	vec4 r = roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * n_v)) * r.x + r.y;
	vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;
	return specularColour * AB.x + AB.y;
}

float VisibilityTerm(float roughness, float n_v, float n_l)
{
	float m2 = roughness * roughness;
	float visV = n_l * sqrt(n_v * (n_v - n_v * m2) + m2);
	float visL = n_v * sqrt(n_l * (n_l - n_l * m2) + m2);
	return saturate( 0.5 / max(visV + visL, 0.00001));
}

float DistributionTerm(float roughness, float n_h)
{
	float m2 = roughness * roughness;
	float d = (n_h * m2 - n_h) * n_h + 1.0;
	return m2 / (d * d * SIMUL_PI_F);
}

vec3 FresnelTerm(vec3 specularColour, float v_h)
{
	vec3 fresnel = specularColour + (1. - specularColour) * pow((1. - v_h), 5.);
	return fresnel;
}

vec3 PBR(vec3 normal,vec3 viewDir,vec3 lightDir,vec3 lightColour,vec3 diffuseColour,vec3 specularColour,float roughness)
{
	float roughnessE	=roughness * roughness;
	float roughnessL	=max(.01, roughnessE);
	vec3 refl			=reflect(viewDir, normal);

	vec3 diffuse	= vec3(0,0,0);
	vec3 specular	= vec3(0,0,0);

	vec3 halfVec	= normalize(viewDir + lightDir);
	float v_h		= saturate(dot(viewDir, halfVec));
	float n_h		= saturate(dot(normal, halfVec));
	float n_v		= saturate(dot(normal, viewDir));
	float n_l		= saturate(dot(normal, lightDir));
	vec3 envSpecularColour = EnvBRDFApprox(specularColour, roughnessE, n_v);

	vec3 env3	=diffuseCubemap.Sample(cubeSamplerState,refl.xyz).rgb;
	vec3 env	=specularCubemap.SampleLevel(cubeSamplerState,refl.xyz,roughnessE*11.0).rgb;
	env			=mix(env, env3, saturate((roughnessE - 0.25) / 0.75));

	diffuse		+=diffuseColour * diffuseCubemap.Sample(cubeSamplerState, normal.xyz).rgb;;
	specular	+=envSpecularColour * env;

	diffuse		+=lightColour *diffuseColour * saturate(n_l);

	vec3 lightF		=FresnelTerm(specularColour, v_h);
	float lightD	=DistributionTerm(roughnessL, n_h);
	float lightV	=VisibilityTerm(roughnessL, n_v, n_l);
	specular		+=lightColour * lightF * (lightD * lightV * SIMUL_PI_F * n_l);

	float ao = 1;// SceneAO(pos, normal, localToWorld);
	//diffuse *= ao;
	specular *= saturate(pow(n_v + ao, roughnessE) - 1. + ao);

	vec3 colour = diffuse+specular;
	return colour;
}

shader vec4 PS_Solid(vertexOutput IN) : SV_TARGET
{
    vec3 normal		=normalize(IN.normal);
	vec3 view		= normalize(IN.wpos.xyz - viewPosition);
    vec3 c			=PBR(normal, view, vec3(0,-.7,.7), vec3(0.5,.48,.45), albedo, vec3(1,1,1),roughness);
    vec4 u			=vec4(c.rgb,1.0);
	return u;
}

/// A function that applies atmospherics and cloud visibility to a pixel of a transparent object.
void AtmosphericsAndCloudOcclusion(out vec4 loss,out vec3 add
				,vec4 clip_pos
				,vec3 view
				,TextureCube nearFarTextureCube
				,Texture2D loss2dTexture
				,Texture2D shadowTexture
				,Texture3D inscatterVolumeTexture
				,vec4 depthToLinFadeDistParams)
{
	clip_pos/=clip_pos.w;
	// we only care about view.z, i.e. the third element of the vector.
	// so only dot-product the third row of invViewProj, with clip_pos.
	float sine					=normalize(view).z;
	vec2 texCoords				=0.5*vec2(clip_pos.x+1.0,1.0-clip_pos.y);
	//vec2 lowResTexCoords		=fullResToLowResTransformXYWH.xy+texCoords*fullResToLowResTransformXYWH.zw;

	vec4 nearFarCloud			=texture_wrap_lod(nearFarTextureCube	,view		,0);

	// translate from depth to linear distance.
	DepthInterpretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=(reverseDepth!=0);
	float dist					=depthToLinearDistance(clip_pos.z	,depthInterpretationStruct);
	float dist_rt				=pow(dist,0.5);
	vec3 worldspaceVolumeTexCoords	=vec3(atan2(view.x,view.y)/(2.0*SIMUL_PI_F),0.5*(1.0+2.0*asin(sine)/SIMUL_PI_F),dist_rt);
	
	// Inscatter from air:
	vec4 insc						=texture_3d_wmc_lod(inscatterVolumeTexture,worldspaceVolumeTexCoords,0);
	
	vec2 loss_texc				=vec2(dist_rt,0.5*(1.f-sine));

	// Visibility due to clouds:
	float visibility			=1.0-saturate((dist-nearFarCloud.w) / (0.001));//(nearFarCloud.x-nearFarCloud.y));

	insc.rgb					*=visibility;
	// loss due to air (alpha is visilibity due to cloud occlusion).
	loss						=vec4(texture_clamp_lod(loss2dTexture,loss_texc,0).rgb,visibility);
	add							=insc.rgb;
}

/// An example shader for rendering transparent objects.
shader vec4 PS_Transparent(vertexOutput IN) : SV_TARGET
{
    vec3 normal	=normalize(IN.normal);
// Here is whatever colour your shader would normally generate in the absence of atmospherics:
    vec4 c = vec4(0.5,0.5,0.5,0.5);

// Now we calculate the atmospheric effects:
	vec4 loss;
	vec3 add;
// We need clip_pos and view direction (i.e. the direction in world xyz to the pixel from the camera).
	AtmosphericsAndCloudOcclusion(loss,add
				,IN.clip_pos
				,IN.view
				,nearFarTextureCube
				,loss2dTexture
				,shadowTexture
				,inscatterVolumeTexture
				,depthToLinFadeDistParams
				);
// Loss is multiplied over the original colour, and inscatter is added:
	c.rgba*=loss.rgba;
	c.rgb+=add;
	return c;
}

VertexShader vs_solid = CompileShader(vs_4_0, VS_Solid_PosOnly());
PixelShader ps_solid = CompileShader(ps_4_0, PS_Solid());
technique solid
{
    pass base 
    {
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_solid);
        SetGeometryShader(NULL);
		SetPixelShader(ps_solid);
    }
}


technique transparent
{
    pass base 
    {
		SetRasterizerState(RenderBackfaceCull);
		//SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetBlendState(AlphaBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_Solid()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Transparent()));
    }
}
