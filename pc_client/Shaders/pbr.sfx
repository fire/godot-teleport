// Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/camera_constants.sl"
#include "video_types.sl"
#include "../SL/depth.sl"
#include "pbr_constants.sl"

uniform Texture2D diffuseTexture;
uniform Texture2D normalTexture;
uniform Texture2D combinedTexture;
uniform Texture2D emissiveTexture;
uniform TextureCube diffuseCubemap;
uniform TextureCube specularCubemap;
uniform TextureCube roughSpecularCubemap;
uniform TextureCube lightingCubemap;
uniform Texture2D videoTexture;

//////////////////////////
uniform TextureCube nearFarTextureCube;
uniform Texture2D loss2dTexture;
uniform Texture2D shadowTexture;
uniform Texture3D inscatterVolumeTexture;
//////////////////////////

uniform StructuredBuffer<PbrLight> lights;
uniform StructuredBuffer<uint4> TagDataIDBuffer;
uniform StructuredBuffer<VideoTagData2D> TagData2DBuffer;
uniform StructuredBuffer<VideoTagDataCube> TagDataCubeBuffer;

SamplerComparisonState shadowComparisonState
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
	AddressW = Clamp;
	Comparison= GREATER;
};

 vec4 GetShadowCoord( vec3 wpos, PbrLight light,LightTag lightTag )
{
    return vec4( mul (lightTag.worldToShadowMatrix, vec4(wpos,1.0)).xyz, 0);
}

float GetShadow(Texture2D videoTexture,PbrLight light,LightTag lightTag,vec3 wpos)
{
	vec4 spos=GetShadowCoord( wpos, light, lightTag );
	vec4 coord=vec4(lightTag.shadowTexCoordOffset.xy+spos.xy*lightTag.shadowTexCoordScale.xy,spos.zw);
	float depth_lookup=videoTexture.SampleLevel(clampSamplerState,coord.xy,0).x;//,coord.z);
	return depth_lookup;
}

float GetRoughness(vec4 combinedLookup)
{
	return combinedLookup.r;
}

float GetMetallic(vec4 combinedLookup)
{
	return combinedLookup.g;
}

float GetAO(vec4 combinedLookup)
{
	return combinedLookup.b;
}

float GetSpecular(vec4 combinedLookup)
{
	return combinedLookup.a;
}

struct vertexInput
{
	vec3 position		: POSITION;
	vec3 normal			: NORMAL;
	vec4 tangent		: TANGENT;
	vec2 texCoords0		: TEXCOORD0;
	vec2 texCoords1		: TEXCOORD1;
	vec4 joints			: TEXCOORD2;
	vec4 weights		: TEXCOORD3;
};

struct vertexInputP
{
    vec3 position		: POSITION;
};

struct vertexOutput
{
    vec4 hPosition		: SV_POSITION;
    vec2 texCoords0		: TEXCOORD0;
    vec2 texCoords1		: TEXCOORD1;
    vec3 normal			: TEXCOORD2;
	vec3 tangent		: TEXCOORD3;
    vec3 wpos			: TEXCOORD4;
    vec3 view			: TEXCOORD5;
    vec4 clip_pos		: TEXCOORD6;
};

shader vertexOutput VS_Solid_PosOnly(vertexInputP IN)
{
    vertexOutput OUT;
	vec4 opos		=vec4(IN.position.xyz,1.0);
    OUT.wpos		=mul(world, opos).xyz;
	OUT.view		=normalize(OUT.wpos.xyz- viewPosition);
    OUT.clip_pos	=mul(opos,worldViewProj);
	OUT.texCoords0	=vec2(0,0);
	OUT.texCoords1	=vec2(0,0);
#ifdef SFX_OPENGL
    OUT.normal.xyz	=mul(vec3(0,0,1.0), mat3(world));
	OUT.tangent.xyz = mul(vec3(0, 0, 1.0), mat3(world));
#else
    OUT.normal.xyz	=mul(vec4(vec3(0,0,1.0),0.0), world).xyz;
	OUT.tangent.xyz =mul(vec4(vec3(0, 0, 1.0), 0.0), world).xyz;
#endif
	OUT.hPosition	=OUT.clip_pos;
    return OUT;
}

shader vertexOutput VS_Solid(vertexInput IN)
{
    vertexOutput OUT;
	vec4 opos		=vec4(IN.position.xyz,1.0);
    vec4 wpos		=mul(opos, world);

	//wpos.xyz		-= videoCamPosition;
	OUT.view		=normalize(wpos.xyz-viewPosition);
	vec4 viewspace_pos = mul( view, vec4(wpos.xyz, 1.0));
	OUT.clip_pos	=mul(proj,vec4(viewspace_pos.xyz,1.0));
	OUT.wpos = wpos.xyz;
	//OUT.clip_pos	=mul( opos, worldViewProj);
	OUT.texCoords0	=IN.texCoords0;
	OUT.texCoords1	=IN.texCoords1;
#ifdef SFX_OPENGL
	OUT.normal.xyz = mul(IN.normal, mat3(world));
	OUT.tangent.xyz = mul(IN.tangent, mat3(world));
#else
	OUT.normal = mul(vec4(IN.normal.xyz, 0.0), world).xyz;
	OUT.tangent = vec4(mul(IN.tangent.xyz, (mat3)world).xyz,0.0).xyz;
	//OUT.normal = IN.normal;
	//OUT.tangent = IN.tangent;
#endif
	OUT.hPosition	=OUT.clip_pos;
    return OUT;
}

shader vertexOutput VS_Animation(vertexInput IN)
{
	vertexOutput OUT;

	vec4 opos		=vec4(IN.position.xyz,1.0);
	vec4 wpos		=mul(opos, world);

	mat4 boneTransform	= boneMatrices[int(IN.joints[0])] * IN.weights[0]
						+ boneMatrices[int(IN.joints[1])] * IN.weights[1]
						+ boneMatrices[int(IN.joints[2])] * IN.weights[2]
						+ boneMatrices[int(IN.joints[3])] * IN.weights[3];

	wpos = mul(opos, boneTransform);
	//wpos = mul(wpos, boneTransform);

	OUT.view		=normalize(wpos.xyz-viewPosition);
	vec4 viewspace_pos = mul( view, vec4(wpos.xyz, 1.0));
	OUT.clip_pos	=mul(proj,vec4(viewspace_pos.xyz,1.0));
	OUT.wpos = wpos.xyz;

	OUT.texCoords0	=IN.texCoords0;
	OUT.texCoords1	=IN.texCoords1;

#ifdef SFX_OPENGL
	OUT.normal.xyz = mul(IN.normal, mat3(world));
	OUT.tangent.xyz = mul(IN.tangent, mat3(world));

	OUT.normal.xyz = mul(OUT.normal, boneTransform);
	OUT.tangent.xyz = mul(OUT.tangent, boneTransform);
#else
	OUT.normal = mul(vec4(IN.normal.xyz, 0.0), world).xyz;
	OUT.tangent = vec4(mul(IN.tangent.xyz, world).xyz, 0.0);

	OUT.normal.xyz = mul(OUT.normal, boneTransform);
	OUT.tangent.xyz = mul(OUT.tangent, boneTransform);
#endif
	
	OUT.normal = IN.weights.xyz;
	OUT.normal += 0.1;
	//OUT.normal = IN.joints.xyz;
	//OUT.normal.r = 0.0;
	
	OUT.hPosition = OUT.clip_pos;
	return OUT;
}

vec3 EnvBRDFApprox(vec3 specularColour, float roughness, float n_v)
{
	const vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);
	const vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);
	vec4 r = roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * n_v)) * r.x + r.y;
	vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;
	return specularColour * AB.x + AB.y;
}

float VisibilityTerm(float roughness, float n_v, float n_l)
{
	float m2 = roughness * roughness;
	float visV = n_l * sqrt(n_v * (n_v - n_v * m2) + m2);
	float visL = n_v * sqrt(n_l * (n_l - n_l * m2) + m2);
	return saturate( 0.5 / max(visV + visL, 0.00001));
}

float DistributionTerm(float roughness, float n_h)
{
	float m2 = roughness * roughness;
	float d = (n_h * m2 - n_h) * n_h + 1.0;
	return m2 / (d * d * SIMUL_PI_F);
}

//SPECULAR
//Fresnel-Schlick
vec3 fresnel_schlick(vec3 R0, vec3 h, vec3 wi)
{
	return R0 + (1.0 - R0) * pow((1.0 - saturate(dot(h, wi))), 5.0);
}
vec3 FresnelTerm(vec3 specularColour, float v_h)
{
	vec3 fresnel = specularColour + (vec3(1.0,1.0,1.0)- specularColour) * pow((1.0 - v_h), 5.0);
	return fresnel;
}

float MipFromRoughness(float roughness, float CubemapMaxMip)
{
	// Heuristic that maps roughness to mip level
	// This is done in a way such that a certain mip level will always have the same roughness, regardless of how many mips are in the texture
	// Using more mips in the cubemap just allows sharper reflections to be supported
	const float REFLECTION_CAPTURE_ROUGHEST_MIP = 6.0 - 1.0;
	float LevelFrom1x1 = REFLECTION_CAPTURE_ROUGHEST_MIP - 1.2 * log2(roughness);
	return (log2(roughness * 1.2) + 3.0);
}

struct SurfaceState
{
	vec3 F;
	vec3 kS;
	vec3 kD;
	vec3 refl;
	float n_v;
};

// The instantaneous properties at a specific point on a surface.
struct SurfaceProperties
{
    vec3 albedo;		// diffuse color
    vec3 normal;
    vec3 emission;
	vec3 position;
	float roughness;
	float roughness2;
	float metallic;
	float ao;
    float specular;		// specular power in 0..1 range
    float gloss;		// specular intensity
    float alpha;		// alpha for transparencies
};


SurfaceState PreprocessSurface(vec3 viewDir,SurfaceProperties surfaceProperties)
{
	SurfaceState surfaceState;
	// Constant normal incidence Fresnel factor for all dielectrics.
	vec3 Fdielectric			=vec3(0.04,0.04,0.04);
	// Fresnel reflectance at normal incidence (for metals use albedo color).
	vec3 F0						= lerp(Fdielectric, surfaceProperties.albedo, surfaceProperties.metallic);
	// Angle between surface normal and outgoing light direction.
	float cosLo					= saturate( dot(surfaceProperties.normal,-viewDir) );
	surfaceState.F				= FresnelTerm(F0, cosLo);
	surfaceState.kS				= surfaceState.F;
	surfaceState.kD				= lerp(vec3(1.0, 1.0, 1.0) - surfaceState.kS, vec3(0.0,0.0,0.0), surfaceProperties.metallic);
	surfaceState.refl			= reflect(viewDir,surfaceProperties.normal);
	surfaceState.n_v			= saturate(dot(surfaceProperties.normal, viewDir));
	return surfaceState;
}

vec3 PBRAmbient(SurfaceState surfaceState,vec3 viewDir,SurfaceProperties surfaceProperties)
{
	float roughness_mip		= MipFromRoughness(surfaceProperties.roughness, 5.0);
	// Sample the environment maps:
	vec3 diffuse_env		= diffuseCubemap.SampleLevel(cubeSamplerState, surfaceProperties.normal.xyz,0.0).rgb;
	vec3 env				= specularCubemap.SampleLevel(cubeSamplerState,surfaceState.refl.xyz, roughness_mip).rgb;
	vec3 rough_env			= roughSpecularCubemap.SampleLevel(cubeSamplerState, surfaceState.refl.xyz, saturate(roughness_mip-3.0)).rgb;
	env						=lerp(env,rough_env,saturate(roughness_mip-2.0));

	//env					=mix(env, diffuse_env, saturate((roughnessE - 0.25) / 0.75));

	vec3 envSpecularColour	=EnvBRDFApprox(surfaceProperties.albedo, surfaceProperties.roughness2, surfaceState.n_v);
	vec3 specular			=surfaceState.kS*envSpecularColour * env;

	 //Metallic materials will have no diffuse output.
	
	vec3 diffuse			= surfaceState.kD*surfaceProperties.albedo * diffuse_env;
	diffuse					*= surfaceProperties.ao;
	vec3 colour				= diffuse+specular;

	return colour;
}

vec3 PBRAddLight(SurfaceState surfaceState,vec3 viewDir,SurfaceProperties surfaceProperties,PbrLight light,LightTag lightTag)
{
	vec3 diff						=light.position-surfaceProperties.position;
	float dist_to_light				=length(diff);
	float d							=max(1.0,dist_to_light/light.radius);
	vec3 irradiance					=light.colour.rgb*lerp(1.0,5.0/(d*d),light.is_point);
	vec3 dir_from_surface_to_light	=lerp(-light.direction,normalize(diff),light.is_point);
	float roughnessL				= max(.01, surfaceProperties.roughness2);
	float n_l						=saturate(dot(surfaceProperties.normal, dir_from_surface_to_light));
	vec3 halfway					=normalize(viewDir+dir_from_surface_to_light);
	vec3 refl						=normalize(reflect(viewDir,surfaceProperties.normal));
	float n_h						=saturate(dot(refl, dir_from_surface_to_light));
	float lightD					=DistributionTerm(roughnessL, n_h);
	float lightV					=VisibilityTerm(roughnessL, surfaceState.n_v, n_l);
	// Per-light:
	vec3 diffuse					=surfaceState.kD*irradiance * surfaceProperties.albedo * saturate(n_l);
	vec3 specular					=irradiance * surfaceState.F * (lightD * lightV * SIMUL_PI_F );

	//float ao				= SceneAO(pos, normal, localToWorld);
	specular						*= surfaceState.kS*saturate(pow(surfaceState.n_v + surfaceProperties.ao, surfaceProperties.roughness2) - 1.0 + surfaceProperties.ao);
	vec3 colour						=diffuse+specular;

	float shadow					=GetShadow(videoTexture,light,lightTag,surfaceProperties.position);
	diffuse *=shadow;
     vec4 spos= mul ( vec4(surfaceProperties.position,1.0),lightTag.worldToShadowMatrix);
    // vec4 spos=saturate( mul (light.lightSpaceTransform, vec4(surfaceProperties.position,1.0)));
	//spos.xy=lightTag.shadowTexCoordScale.xy;
	//	spos.z=0;

	vec4 coord=(vec4(lightTag.shadowTexCoordOffset.xy+spos.xy*lightTag.shadowTexCoordScale.xy,spos.zw));
	vec4 shadowLookup=videoTexture.SampleLevel(clampSamplerState,coord.xy,0);//,coord.z);
	float in_range=step(0.0,spos.x)*step(spos.x,1.0)*step(0.0,spos.y)*step(spos.y,1.0);
	return in_range*(saturate(spos.xyz)+shadowLookup.xxx+.2*frac(spos.xyz*10.0));//vec3(shadow,0,0);
}

vec4 Solid(vertexOutput IN)
{
	vec3 tangentx		= normalize(IN.tangent);
	vec3 tangenty		= normalize(cross(IN.normal, tangentx));
	mat3 TangentMatrix	= mat3(tangentx, normalize(tangenty), normalize(IN.normal)); //transforms world=>tangent space

	vec3 normalLookup	= normalTexture.Sample(wrapSamplerState, IN.texCoords0.xy * normalTexCoordsScalar_R).xyz;
	normalLookup		= 2.0 * (normalLookup.rgb - vec3(0.5, 0.5, 0.5));
	vec3 normal			= normalize(mul(normalLookup, TangentMatrix));

	vec3 diffuseColour	= diffuseTexture.Sample(wrapSamplerState, IN.texCoords0.xy * diffuseTexCoordsScalar_R).rgb;
	diffuseColour		= diffuseColour.rgb * diffuseOutputScalar.rgb;

	vec3 view			= normalize(IN.wpos.xyz - viewPosition);
	vec4 combinedLookup = combinedTexture.Sample(wrapSamplerState, IN.texCoords0.xy * combinedTexCoordsScalar_R);
	// from combinedLookup we will either use roughness*roughnessTexture, or (1-roughness)*smoothnessTexture. This depends on combinedOutputScalarRoughMetalOcclusion.a.
	combinedLookup		=combinedLookup.araa;
	//combinedLookup.a	=1.0-combinedLookup.a;
	// occlusion to 1.0 for now.
	combinedLookup.b	=1.0;
	// So combinedLookup is now rough-metal-occl-smooth
	vec4 roughMetalOcclusion;
	roughMetalOcclusion.rgb			=combinedOutputScalarRoughMetalOcclusion.rgb*combinedLookup.rgb;
	// smoothness:
	roughMetalOcclusion.a			=(1.0-combinedOutputScalarRoughMetalOcclusion.r)*combinedLookup.a;
	SurfaceProperties surfaceProperties;
	surfaceProperties.position		=IN.wpos;
	// Either roughness or 1.0-smoothness depending on alpha of scalar.
	surfaceProperties.roughness		=lerp(roughMetalOcclusion.r,1.0-roughMetalOcclusion.a,combinedOutputScalarRoughMetalOcclusion.a);
	surfaceProperties.metallic		=GetMetallic(roughMetalOcclusion);
	surfaceProperties.ao			=GetAO(roughMetalOcclusion);

	surfaceProperties.normal		=normal;
	surfaceProperties.albedo		=diffuseColour;
	surfaceProperties.roughness2	=surfaceProperties.roughness*surfaceProperties.roughness;

	SurfaceState surfaceState	=PreprocessSurface(view,surfaceProperties);
	vec3 c						=PBRAmbient(surfaceState, view, surfaceProperties);
	int id = int(TagDataIDBuffer[0].x);
	VideoTagDataCube tagData = TagDataCubeBuffer[id];
	for(int i=0;i<10;i++)
	{
		if(i>=lightCount)
			break;
		PbrLight light		=lights[i];
		LightTag lightTag	=tagData.lightTags[i];
		c					=PBRAddLight(surfaceState,view,surfaceProperties,light,lightTag);
	}
	//c.gb += 0.03;

	vec3 emissive		= emissiveTexture.Sample(wrapSamplerState, IN.texCoords0.xy * emissiveTexCoordsScalar_R).rgb;
	emissive			*= emissiveOutputScalar.rgb;
//	c=1.0-roughMetalOcclusion.a;
	vec4 u				=vec4(c.rgb + emissive.rgb, 1.0);

	return u;
}

vec4 Solid_AlbedoOnly(vertexOutput IN)
{
	vec3 diffuseColour	= diffuseTexture.Sample(wrapSamplerState, IN.texCoords0.xy * diffuseTexCoordsScalar_R).rgb;
	diffuseColour = diffuseColour.rgb * diffuseOutputScalar.rgb;

	return vec4(diffuseColour.rgb, 1.0);
}

shader vec4 PS_Solid(vertexOutput IN) : SV_TARGET
{
	return Solid(IN);
}

shader vec4 PS_Depth(vertexOutput IN) : SV_TARGET
{
	return Solid(IN);
}

shader vec4 PS_Solid_AlbedoOnly(vertexOutput IN) : SV_TARGET
{
	return Solid_AlbedoOnly(IN);
}

vec4 DebugNormal(vertexOutput IN, int swizzle_mode)
{
	vec3 tangentx = normalize(IN.tangent);
	vec3 tangenty = normalize(cross(IN.normal, tangentx));
	mat3 TangentMatrix = mat3(tangentx, normalize(tangenty), normalize(IN.normal)); //transforms world=>tangent space

	vec3 normalLookup	= normalTexture.Sample(wrapSamplerState, IN.texCoords0.xy * normalTexCoordsScalar_R).bgr;
	normalLookup		= 2.0 * (normalLookup.rgb - vec3(0.5, 0.5, 0.5));
	vec3 normal = normalize(mul(normalLookup, TangentMatrix));
	normal = (normal + vec3(1.0f, 1.0f, 1.0f)) / 2.0f;

	switch(swizzle_mode)
	{
		case 1: return vec4(normal.yxz, 1.0f); //Unreal-Swizzled
		case 2: return vec4(normal.xzy, 1.0f); //Unity-Swizzled
		case 3: return vec4(IN.normal.xyz, 1.0f); // Vertex normals unswizzled
		default: return vec4(normalLookup.xyz, 1.0f); //Unswizzled
	}
}

shader vec4 PS_DebugNormal_Unswizzled(vertexOutput IN) : SV_TARGET
{
	return DebugNormal(IN, 0);
}

shader vec4 PS_DebugNormal_Unreal(vertexOutput IN) : SV_TARGET
{
	return DebugNormal(IN, 1);
}

shader vec4 PS_DebugNormal_Unity(vertexOutput IN) : SV_TARGET
{
	return DebugNormal(IN, 2);
}

shader vec4 PS_DebugNormal_VertexNormals(vertexOutput IN) : SV_TARGET
{
	return DebugNormal(IN, 3);
}

/// A function that applies atmospherics and cloud visibility to a pixel of a transparent object.
void AtmosphericsAndCloudOcclusion(out vec4 loss,out vec3 add
				,vec4 clip_pos
				,vec3 view
				,TextureCube nearFarTextureCube
				,Texture2D loss2dTexture
				,Texture2D shadowTexture
				,Texture3D inscatterVolumeTexture
				,vec4 depthToLinFadeDistParams)
{
	clip_pos/=clip_pos.w;
	// we only care about view.z, i.e. the third element of the vector.
	// so only dot-product the third row of invViewProj, with clip_pos.
	float sine					=normalize(view).z;
	vec2 texCoords				=0.5*vec2(clip_pos.x+1.0,1.0-clip_pos.y);

	vec4 nearFarCloud			=texture_wrap_lod(nearFarTextureCube	,view		,0);

	// translate from depth to linear distance.
	DepthInterpretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=(reverseDepth!=0);
	float dist					=depthToLinearDistance(clip_pos.z	,depthInterpretationStruct);
	float dist_rt				=pow(dist,0.5);
	vec3 worldspaceVolumeTexCoords	=vec3(atan2(view.x,view.y)/(2.0*SIMUL_PI_F),0.5*(1.0+2.0*asin(sine)/SIMUL_PI_F),dist_rt);
	
	// Inscatter from air:
	vec4 insc						=texture_3d_wmc_lod(inscatterVolumeTexture,worldspaceVolumeTexCoords,0);
	
	vec2 loss_texc				=vec2(dist_rt,0.5*(1.f-sine));

	// Visibility due to clouds:
	float visibility			=1.0-saturate((dist-nearFarCloud.w) / (0.001));//(nearFarCloud.x-nearFarCloud.y));

	insc.rgb					*=visibility;
	// loss due to air (alpha is visilibity due to cloud occlusion).
	loss						=vec4(texture_clamp_lod(loss2dTexture,loss_texc,0).rgb,visibility);
	add							=insc.rgb;
}

/// An example shader for rendering transparent objects.
shader vec4 PS_Transparent(vertexOutput IN) : SV_TARGET
{
    vec3 normal	=normalize(IN.normal);
// Here is whatever colour your shader would normally generate in the absence of atmospherics:
    vec4 c = vec4(0.5,0.5,0.5,0.5);

// Now we calculate the atmospheric effects:
	vec4 loss;
	vec3 add;
// We need clip_pos and view direction (i.e. the direction in world xyz to the pixel from the camera).
	AtmosphericsAndCloudOcclusion(loss,add
				,IN.clip_pos
				,IN.view
				,nearFarTextureCube
				,loss2dTexture
				,shadowTexture
				,inscatterVolumeTexture
				,depthToLinFadeDistParams
				);
// Loss is multiplied over the original colour, and inscatter is added:
	c.rgba*=loss.rgba;
	c.rgb+=add;
	return c;
}

VertexShader vs_solid = CompileShader(vs_4_0, VS_Solid());
VertexShader vs_anim = CompileShader(vs_4_0, VS_Animation());
PixelShader ps_solid = CompileShader(ps_4_0, PS_Solid());
PixelShader ps_depth = CompileShader(ps_5_1, PS_Depth());

//Debug renders.
PixelShader ps_solid_albedo_only = CompileShader(ps_4_0, PS_Solid_AlbedoOnly()); //Albedo only view
PixelShader ps_debug_normal_unswizzled = CompileShader(ps_4_0, PS_DebugNormal_Unswizzled()); //Unswizzled Normal view
PixelShader ps_debug_normal_unreal = CompileShader(ps_4_0, PS_DebugNormal_Unreal()); //Unreal-basis normal view
PixelShader ps_debug_normal_unity = CompileShader(ps_4_0, PS_DebugNormal_Unity()); //Unity-basis normal view
PixelShader ps_debug_normal_vertexnormals = CompileShader(ps_4_0, PS_DebugNormal_VertexNormals()); //Vertex normals

technique solid
{
    pass depth 
    {
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_solid);
        SetGeometryShader(NULL);
		SetPixelShader(ps_depth);
    }
    pass pbr 
    {
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_solid);
        SetGeometryShader(NULL);
		SetPixelShader(ps_solid);
    }
	pass albedo_only
    {
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_solid);
        SetGeometryShader(NULL);
		SetPixelShader(ps_solid_albedo_only);
    }
	pass normal_unswizzled
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_solid);
        SetGeometryShader(NULL);
		SetPixelShader(ps_debug_normal_unswizzled);
    }
	pass normal_unreal
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_solid);
        SetGeometryShader(NULL);
		SetPixelShader(ps_debug_normal_unreal);
    }
	pass normal_unity
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_solid);
        SetGeometryShader(NULL);
		SetPixelShader(ps_debug_normal_unity);
    }
	pass normal_vertexnormals
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_solid);
        SetGeometryShader(NULL);
		SetPixelShader(ps_debug_normal_vertexnormals);
    }

	pass anim_pbr 
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_anim);
		SetGeometryShader(NULL);
		SetPixelShader(ps_solid);
	}
	pass anim_albedo_only
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_anim);
		SetGeometryShader(NULL);
		SetPixelShader(ps_solid_albedo_only);
	}
	pass anim_normal_unswizzled
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_anim);
		SetGeometryShader(NULL);
		SetPixelShader(ps_debug_normal_unswizzled);
	}
	pass anim_normal_unreal
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_anim);
		SetGeometryShader(NULL);
		SetPixelShader(ps_debug_normal_unreal);
	}
	pass anim_normal_unity
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_anim);
		SetGeometryShader(NULL);
		SetPixelShader(ps_debug_normal_unity);
	}
	pass anim_normal_vertexnormals
	{
		SetRasterizerState(RenderFrontfaceCull);
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_anim);
		SetGeometryShader(NULL);
		SetPixelShader(ps_debug_normal_vertexnormals);
	}
}


technique transparent
{
    pass base 
    {
		SetRasterizerState(RenderBackfaceCull);
		//SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetBlendState(AlphaBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_Solid()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Transparent()));
    }
}
