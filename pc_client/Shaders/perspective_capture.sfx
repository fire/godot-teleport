//  Copyright (c) 2015-2020 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "common.sl"
#include "render_states.sl"
#include "sampler_states.sl"
#include "camera_constants.sl"

uniform Texture2D<float4> videoTexture;
uniform RWTexture2DArray<uchar4> RWTextureTargetArray;

[numthreads(16, 16, 1)]
shader void CS_RecomposeTextureFromVideo(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)
{
	int3 pos = int3(g.xy * 16 + t.xy, 0);
	float4 SceneColor = videoTexture.Load(pos);
	// RGB values are squared here because the server used their square root to improve colour quantization in the video encoder. 
	SceneColor.r *= SceneColor.r;
	SceneColor.g *= SceneColor.g;
	SceneColor.b *= SceneColor.b;
	RWTextureTargetArray[pos] = SceneColor;
}

technique recompose_texture
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0, CS_RecomposeTextureFromVideo()));
	}
}