// (c) 2018 Simul.co

#include "/Engine/Public/Platform.ush"

static const float PI     = 3.141592;
static const float HalfPI = 0.5 * PI;
static const float TwoPI  = 2.0 * PI;

// TODO: Expose those parameters to the capture component.
static const float TonemapGamma     = 2.2;
static const float TonemapExposure  = 1.0;
static const float TonemapPureWhite = 1.0;

TextureCube CaptureCubemap;
SamplerState CaptureSampler;

RWTexture2D<float4> RWOutputTexture;

// Reinhard tonemapping operator with gamma correction.
// TODO: Switch to filmic tonemapping ala Uncharted 2.
float4 Tonemap(float4 SceneColor)
{
	const float PureWhiteSq = TonemapPureWhite * TonemapPureWhite;
	float Luminance = dot(SceneColor.rgb, float3(0.2126, 0.7152, 0.0722));

	float MappedLuminance = (Luminance * (1.0 + Luminance/PureWhiteSq)) / (1.0 + Luminance);
	float3 MappedColor = (MappedLuminance / Luminance) * SceneColor.rgb;
	return float4(pow(MappedColor, 1.0/TonemapGamma), SceneColor.a);
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void MainCS(uint2 ThreadID : SV_DispatchThreadID)
{
	uint OutputW, OutputH;
	RWOutputTexture.GetDimensions(OutputW, OutputH);

	float2 UV   = float2(ThreadID.x / float(OutputW), ThreadID.y / float(OutputH));
	float Phi   = UV.x * TwoPI;
	float Theta = UV.y * PI;

	float3 CubeSampleVec = float3(
		sin(Theta) * cos(Phi),
		sin(Theta) * sin(Phi),
		cos(Theta)
	);

	float4 SceneColor = CaptureCubemap.SampleLevel(CaptureSampler, CubeSampleVec, 0);
	RWOutputTexture[int2(ThreadID.x, ThreadID.y)] = Tonemap(SceneColor);
}
